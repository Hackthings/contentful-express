/**
 *
 * @module init
 * @description Scaffold the project directory
 *
 */
var cwd = process.cwd();
var task = process.argv[ 2 ];
var execSync = require( "child_process" ).execSync;
var path = require( "path" );
var fs = require( "fs" );
var rimraf = require( "rimraf" );
var lager = require( "./lager" );
var gitIgnore = [
    "# See http://help.github.com/ignore-files/ for more about ignoring files.",
    "#",
    "# If you find yourself ignoring temporary files generated by your text editor",
    "# or operating system, you probably want to add a global ignore instead:",
    "# git config --global core.excludesfile ~/.gitignore_global",
    "",
    "",
    "",
    ".DS_Store",
    ".notes",
    ".sass-cache",
    "",
    "",
    "node_modules",
    "npm-debug.log",
    "config.js",
    "db",
    "build",
    "js_libs",
    "static"
];



/**
 *
 * @method init
 * @description Scaffold the project directory
 *
 */
var init = function () {
    return new Promise(function ( resolve, reject ) {
        fs.mkdirSync( path.join( cwd, "source" ) );
        fs.mkdirSync( path.join( cwd, "source", "js" ) );
        fs.mkdirSync( path.join( cwd, "source", "sass" ) );

        var root = path.join( __dirname, "../scaffold/*" );
        var dest = path.join( cwd );
        var temp = path.join( cwd, "temp" );
        var js = path.join( temp, "js_src/*" );
        var jsCopy = path.join( cwd, "source", "js" );
        var sass = path.join( temp, "sass/*" );
        var sassCopy = path.join( cwd, "source", "sass" );
        var lint = path.join( temp, ".eslintrc" );
        var lintCopy = path.join( cwd, ".eslintrc" );
        var jsLibs = path.join( cwd, "js_libs" );
        var jsHobo = path.join( jsLibs, "hobo" );
        var cssFile = path.join( cwd, "static", "css", "screen.css" );

        lager( "cache", "Copying scaffold files..." );
        execSync( "cp -R " + root + " " + dest );
        fs.writeFileSync( path.join( cwd, ".gitignore" ), gitIgnore.join( "\n" ) );

        lager( "cache", "Creating static..." );
        fs.mkdirSync( path.join( cwd, "static" ) );
        fs.mkdirSync( path.join( cwd, "static", "css" ) );
        fs.mkdirSync( path.join( cwd, "static", "fonts" ) );
        fs.mkdirSync( path.join( cwd, "static", "images" ) );
        fs.writeFileSync( cssFile, "" );

        lager( "cache", "Creating lowdb databases..." );
        fs.mkdirSync( path.join( cwd, "db" ) );

        lager( "cache", "Cloning ProperJS/App..." );
        execSync( "git clone git@github.com:ProperJS/App.git " + temp );
        execSync( "cp -R " + js + " " + jsCopy );
        execSync( "cp -R " + sass + " " + sassCopy );
        execSync( "cp " + lint + " " + lintCopy );

        rimraf.sync( temp );

        lager( "cache", "Cloning ProperJS/hobo..." );
        execSync( "git clone git@github.com:ProperJS/hobo.git " + jsHobo );

        lager( "cache", "Building ProperJS/hobo dist..." );
        execSync( "cd " + jsHobo + " && npm install && npm run build -- \"eq not filter detach append remove\"" );

        lager( "cache", "Installing node_modules..." );
        execSync( "cd " + cwd + " && npm install" );

        lager( "cache", "Running npm build" );
        execSync( "cd " + cwd + " && npm run build" );

        resolve();
    });
};



/******************************************************************************
 * Export
*******************************************************************************/
module.exports = init;