/**
 *
 * @module init
 * @description Scaffold the project directory
 *
 */
var cwd = process.cwd();
var task = process.argv[ 2 ];
var execSync = require( "child_process" ).execSync;
var path = require( "path" );
var fs = require( "fs" );
var rimraf = require( "rimraf" );
var lager = require( "./lager" );
var gitIgnore = [
    "# See http://help.github.com/ignore-files/ for more about ignoring files.",
    "#",
    "# If you find yourself ignoring temporary files generated by your text editor",
    "# or operating system, you probably want to add a global ignore instead:",
    "# git config --global core.excludesfile ~/.gitignore_global",
    "",
    "",
    "",
    ".DS_Store",
    ".notes",
    ".sass-cache",
    "",
    "",
    "node_modules",
    "npm-debug.log",
    "config.js",
    "db",
    "build",
    "static"
];



/**
 *
 * @method init
 * @description Scaffold the project directory
 *
 */
var init = function () {
    return new Promise(function ( resolve, reject ) {
        var root = path.join( __dirname, "../scaffold/*" );
        var dest = path.join( cwd );
        var temp = path.join( cwd, "temp" );

        var src = path.join( temp, "source" );
        var srcCopy = path.join( cwd, "source" );

        var lint = path.join( temp, ".eslintrc" );
        var lintCopy = path.join( cwd, ".eslintrc" );

        var bin = path.join( temp, "bin/install" );
        var binCopy = path.join( cwd, "bin/install" );

        var json = path.join( temp, "package.json" );
        var jsonCopy = path.join( cwd, "package.json" );

        var pack = path.join( temp, "webpack.config.js" );
        var packCopy = path.join( cwd, "webpack.config.js" );

        var cssFile = path.join( cwd, "static", "css", "screen.css" );

        lager( "cache", "Copying scaffold files..." );
        execSync( "cp -R " + root + " " + dest );
        fs.writeFileSync( path.join( cwd, ".gitignore" ), gitIgnore.join( "\n" ) );

        lager( "cache", "Creating static..." );
        fs.mkdirSync( path.join( cwd, "static" ) );
        fs.mkdirSync( path.join( cwd, "static", "js" ) );
        fs.mkdirSync( path.join( cwd, "static", "css" ) );
        fs.mkdirSync( path.join( cwd, "static", "fonts" ) );
        fs.mkdirSync( path.join( cwd, "static", "images" ) );
        fs.writeFileSync( cssFile, "" );

        lager( "cache", "Creating lowdb databases..." );
        fs.mkdirSync( path.join( cwd, "db" ) );

        lager( "cache", "Cloning ProperJS/App..." );
        execSync( "git clone git@github.com:ProperJS/App.git " + temp );
        execSync( "cp -R " + src + " " + srcCopy );
        execSync( "cp -R " + bin + " " + binCopy );
        execSync( "cp " + lint + " " + lintCopy );
        execSync( "cp " + json + " " + jsonCopy );
        execSync( "cp " + pack + " " + packCopy );

        rimraf.sync( temp );

        lager( "cache", "Installing node_modules..." );
        execSync( "cd " + cwd + " && ./bin/install" );
        execSync( "npm install ejs --save-dev" );

        lager( "cache", "Installation complete! Run npm start." );

        resolve();
    });
};



/******************************************************************************
 * Export
*******************************************************************************/
module.exports = init;